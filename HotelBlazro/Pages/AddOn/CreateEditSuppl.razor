@using HotelBlazro.Data
@using Microsoft.VisualBasic.CompilerServices
@using System.Data.Common
@using System.Runtime.CompilerServices
@using HotelBlazro.Data
@inject IHotelService _service
@inject NavigationManager _manager
<h3 xmlns="http://www.w3.org/1999/html">Create</h3>
@inject IJSRuntime JsRuntime
<div class="row mt-2 mb-5">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@Supplement" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                                 <div class="form-group">
                                    <label class="alert-info">
                                        Description :
                                        <InputText id="Desc" @bind-Value="Supplement.Description"/>
                                    </label>
                                 </div>
                               <div class="form-group">
                                    <label>
                                        Price :
                                        <InputNumber id="Pricesupp" @bind-Value="Supplement.Price"/>
                                    </label>
                               </div>
                            
                    <button type="submit" class="btn btn-primary">Submit</button>
                 <button class="btn btn-secondary" type="reset" @onclick="Reset">Reset</button>
                </EditForm>

            </div>
        </div>
    </div>

</div>
@code {

    [Parameter]
    public int Id { get; set; }
    [Parameter] public EventCallback<Supplement> ValueChanged { get; set; }

    private Supplement Supplement { get; set; } = new Supplement();

    protected override async Task OnParametersSetAsync()
    {
    //   int id = Convert.ToInt32(Id);
        if (Id != 0)
        {
          
            Supplement = await _service.GetSupplement(Id);
        }
    }

  
    private async Task HandleValidSubmit()
    {
        _service.AddUpdateSupplements(Supplement);
        Reset();
        await JsRuntime.ShowSucces("Room Saved");
        await ValueChanged.InvokeAsync();
    
    }

    private void Reset()
    {
        Id = 0;
        Supplement = new Supplement();
       
    }

}